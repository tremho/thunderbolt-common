import * as fileApi from './FileApi';
import * as dialogApi from './DialogAPI';
import * as webApi from './WebApi';
export declare const mainApi: {
    startTest(host?: string): Promise<number>;
    webSend(request: webApi.WebRequest): Promise<webApi.WebResponse>;
    WebRequest: typeof webApi.WebRequest;
    WebResponse: typeof webApi.WebResponse;
    openDialog(dialogOptions: dialogApi.DialogOptions): Promise<number>;
    DialogOptions: typeof dialogApi.DialogOptions;
    getAppPath(): Promise<string>;
    readFileText(pathName: string): Promise<string>;
    fileExists(pathName: string): Promise<boolean>;
    readFileArrayBuffer(pathName: string): Promise<Uint8Array>;
    writeFileText(pathName: string, text: string): Promise<void>;
    writeFileArrayBuffer(pathName: string, data: ArrayBuffer): Promise<void>;
    fileDelete(pathName: string): Promise<void>;
    fileMove(pathName: string, newPathName: string): Promise<void>;
    fileRename(pathName: string, newBase: string): Promise<void>;
    fileCopy(pathName: string, toPathName: string): Promise<void>;
    fileStats(pathName: string): Promise<fileApi.FileDetails>;
    createFolder(pathName: string): Promise<void>;
    removeFolder(pathName: string, andClear: boolean): Promise<void>;
    readFolder(pathName: string): Promise<fileApi.FileDetails[]>;
    getUserAndPathInfo(): Promise<fileApi.UserPathInfo>;
    FileDetails: typeof fileApi.FileDetails;
    UserPathInfo: typeof fileApi.UserPathInfo;
    requestEnvironment: () => void;
    appExit: (code: number) => never;
};
export declare function setCallTestRequest(ctr: any): void;
export declare function sendTestRequest(request: string, params: string[], cb?: any): Promise<unknown>;
